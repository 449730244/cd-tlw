<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/22
 * Time: 15:29
 * 权限管理
 */
namespace app\admin\controller;

use think\Db;
class Auth extends Common
{
    public function _initialize()
    {
        return parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //用户组
    public function group()
    {
        $list = DB::name('auth_group')->paginate(10);
        $this->assign('list',$list);
        return view();
    }

    //添加用户组
    public function groupAdd()
    {
        if(request()->isPost())
        {
            $data = input('post.');
            $validate = validate('Group');
            if(!$validate->check($data))
            {
                return ['code'=>1,'msg'=>$validate->getError()];
            }else{
                if(Db::name('auth_group')->insert($data))
                {
                    return ['url'=>'/admin/Auth/group','code'=>0,'msg'=>'添加成功'];
                }
            }
        }
        return view();
    }

    //编辑用户组
    public function groupEdit()
    {
        if(request()->isPost())
        {
            $data['title']  = input('post.title');
            $data['status'] = input('post.status');
            $id             = input('post.id');
            $validate = validate('Group');
            if(!$validate->check($data))
            {
                return ['code'=>1,'msg'=>$validate->getError()];
            }else{
                if(Db::name('auth_group')->where(['id' => $id])->update($data))
                {
                    return ['url'=>'/admin/Auth/group','code'=>0,'msg'=>'修改成功'];
                }
            }
        }
        $gid = input('param.gid');
        $group = Db::name('auth_group')->where(['id' => $gid])->find();
        $this->assign('group',$group);
        return view();
    }

    //禁用/启用
    public function groupSetStatus($id,$sta)
    {
        if(Db::name('auth_group')->where(['id' => $id])->update(['status' => $sta]))
        {
            return ['url' => '/admin/Auth/group','code' => 1,'msg'=>'设置成功'];
        }
    }

    //分配权限
    public function groupSetRules()
    {

        if(request()->isPost())
        {
            $gid = input('post.gid');
            $rule_ids['rules'] = implode(',',input('post.rule_id/a'));
            if(Db::name('auth_group')->where(['id' => $gid])->update($rule_ids))
            {
                return ['url'=>'/admin/Auth/group','code' => 0,'msg'=>'设置成功'];
            }
        }
        $gid = input('param.gid');
        $group = Db::name('auth_group')->where(['id' => $gid])->find();
        $list = DB::name('auth_rule')->getTreeData('level','id','title');
        $this->assign('group',$group);
        $this->assign('list',$list);
        return view();
    }


    //权限列表
    public function rule()
    {
        $list = DB::name('auth_rule')->getTreeData('tree','id','title');
        $this->assign('list',$list);
        return view();
    }


    //添加权限
    public function ruleAdd()
    {
       if(request()->isPost())
       {
            $validate = validate('Rule');
            $data = input('post.');
            if(!$validate->check($data))
            {
                return ['code' => 1,'msg' => $validate->getError()];
            }else{
                if(Db::name('auth_rule')->insert($data))
                {
                    return ['url'=>'/admin/Auth/rule','code'=>0,'msg'=>'添加成功'];
                }
            }
       }
       if(input('param.pid'))
       {
           $pid = input('param.pid');
           $p_name = Db::name('auth_rule')->field('title')->where(['id' => $pid])->find();

           $this->assign('p_name',$p_name['title']);
           $this->assign('pid',$pid);
       }
       return view();
    }

    //权限编辑
    public function ruleEdit()
    {
        if(request()->isPost())
        {
            $validate = validate('Rule');
            $data = input('post.');
            if(!$validate->check($data))
            {
                return ['code' => 1,'msg' => $validate->getError()];
            }else{
                if(Db::name('auth_rule')->where(['id' => $data['id']])->update($data))
                {
                    return ['url'=>'/admin/Auth/rule','code'=>0,'msg'=>'修改成功'];
                }
            }
        }
        $rid = input('param.rid');
        $rule = Db::name('auth_rule')->where(['id' => $rid])->find();
        $this->assign('rule',$rule);
        return view();
    }
    //禁用/启用
    public function ruleSetStatus($id,$sta)
    {
        if(Db::name('auth_rule')->where(['id' => $id])->update(['status' => $sta]))
        {
            return ['url' => '/admin/Auth/rule','code' => 1,'msg'=>'设置成功'];
        }
    }
    //删除权限
    public function ruleDel($rid)
    {
        if($this->checkChild('auth_rule',['pid' => $rid]))
        {
            return ['code' => 0,'msg' => '存在子权限，无法删除'];
        }else{
            if(Db::name('auth_rule')->where(['id' => $rid])->delete())
            {
                return ['url'=>'/admin/Auth/rule','code'=>1,'msg'=>'删除成功'];
            }
        }
    }

    //检测权限是否有子权限
    public function checkChild($table,$where)
    {
        if(Db::name($table)->where($where)->count() > 0)
        {
            return true;
        }
        return false;
    }

    //验证是否存在
    public function checkIsExist($table,$where)
    {
        if(Db::name($table)->where($where)->find())
        {
            return true;
        }
        return false;
    }
}